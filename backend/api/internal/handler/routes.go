// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	login "neekity.com/go-admin/api/internal/handler/login"
	menu "neekity.com/go-admin/api/internal/handler/menu"
	oauth "neekity.com/go-admin/api/internal/handler/oauth"
	permission "neekity.com/go-admin/api/internal/handler/permission"
	role "neekity.com/go-admin/api/internal/handler/role"
	user "neekity.com/go-admin/api/internal/handler/user"
	"neekity.com/go-admin/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth, serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/menu/delete",
					Handler: menu.DeleteMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/list",
					Handler: menu.MenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/store",
					Handler: menu.StoreMenuHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/oauth/login",
				Handler: oauth.AttemptLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/oauth/callback",
				Handler: oauth.LoginCallbackHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth, serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user",
					Handler: user.GetUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/role/assign",
					Handler: user.AssignRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/roles",
					Handler: user.UserRolesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/info",
					Handler: user.GetUserInfoHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth, serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/role",
					Handler: role.GetRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/role/store",
					Handler: role.StoreRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/role/detail",
					Handler: role.RoleDetailHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: login.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/logout",
				Handler: login.LogoutHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth, serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/permission",
					Handler: permission.GetPermissionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/permission/store",
					Handler: permission.StorePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/permission/detail",
					Handler: permission.PermissionDetailHandler(serverCtx),
				},
			}...,
		),
	)
}
